// Code generated by goctl. DO NOT EDIT.
// goctls v1.12.0

package handler

import (
	"net/http"

	api2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/api"
	authority2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/authority"
	base2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/base"
	captcha2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/captcha"
	configuration2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/configuration"
	department2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/department"
	dictionary2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/dictionary"
	dictionarydetail2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/dictionarydetail"
	emaillog2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/emaillog"
	emailprovider2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/emailprovider"
	menu2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/menu"
	messagesender2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/messagesender"
	oauthprovider2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/oauthprovider"
	position2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/position"
	"github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/publicapi"
	publicuser2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/publicuser"
	role2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/role"
	smslog2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/smslog"
	smsprovider2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/smsprovider"
	task2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/task"
	tasklog2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/tasklog"
	token2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/token"
	user2 "github.com/suyuan32/simple-admin-core/service/admin/api/internal/handler/user"
	"github.com/suyuan32/simple-admin-core/service/admin/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/core/init/database",
				Handler: base2.InitDatabaseHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/core/init/job_database",
				Handler: base2.InitJobDatabaseHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/core/init/mcms_database",
				Handler: base2.InitMcmsDatabaseHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/role/create",
					Handler: role2.CreateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/role/update",
					Handler: role2.UpdateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/role/delete",
					Handler: role2.DeleteRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/role/list",
					Handler: role2.GetRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/role",
					Handler: role2.GetRoleByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: publicuser2.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login_by_email",
				Handler: publicuser2.LoginByEmailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login_by_sms",
				Handler: publicuser2.LoginBySmsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: publicuser2.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register_by_email",
				Handler: publicuser2.RegisterByEmailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register_by_sms",
				Handler: publicuser2.RegisterBySmsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/reset_password_by_email",
				Handler: publicuser2.ResetPasswordByEmailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/reset_password_by_sms",
				Handler: publicuser2.ResetPasswordBySmsHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user/create",
					Handler: user2.CreateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/update",
					Handler: user2.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/delete",
					Handler: user2.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/list",
					Handler: user2.GetUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user",
					Handler: user2.GetUserByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/change_password",
					Handler: user2.ChangePasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/info",
					Handler: user2.GetUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/perm",
					Handler: user2.GetUserPermCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/profile",
					Handler: user2.GetUserProfileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/profile",
					Handler: user2.UpdateUserProfileHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/logout",
					Handler: user2.LogoutHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/refresh_token",
					Handler: user2.RefreshTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/access_token",
					Handler: user2.AccessTokenHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/menu/create",
					Handler: menu2.CreateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/update",
					Handler: menu2.UpdateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/delete",
					Handler: menu2.DeleteMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/menu/list",
					Handler: menu2.GetMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/menu/role/list",
					Handler: menu2.GetMenuListByRoleHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/captcha",
				Handler: captcha2.GetCaptchaHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/captcha/email",
				Handler: captcha2.GetEmailCaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/captcha/sms",
				Handler: captcha2.GetSmsCaptchaHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/create",
					Handler: api2.CreateApiHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/update",
					Handler: api2.UpdateApiHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/delete",
					Handler: api2.DeleteApiHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/list",
					Handler: api2.GetApiListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api",
					Handler: api2.GetApiByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/authority/api/create_or_update",
					Handler: authority2.CreateOrUpdateApiAuthorityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/authority/api/role",
					Handler: authority2.GetApiAuthorityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/authority/menu/create_or_update",
					Handler: authority2.CreateOrUpdateMenuAuthorityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/authority/menu/role",
					Handler: authority2.GetMenuAuthorityHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/dictionary/create",
					Handler: dictionary2.CreateDictionaryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/dictionary/update",
					Handler: dictionary2.UpdateDictionaryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/dictionary/delete",
					Handler: dictionary2.DeleteDictionaryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/dictionary/list",
					Handler: dictionary2.GetDictionaryListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/dictionary",
					Handler: dictionary2.GetDictionaryByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/oauth/login",
				Handler: oauthprovider2.OauthLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/oauth/login/callback",
				Handler: oauthprovider2.OauthCallbackHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/oauth_provider/create",
					Handler: oauthprovider2.CreateOauthProviderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oauth_provider/update",
					Handler: oauthprovider2.UpdateOauthProviderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oauth_provider/delete",
					Handler: oauthprovider2.DeleteOauthProviderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oauth_provider/list",
					Handler: oauthprovider2.GetOauthProviderListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oauth_provider",
					Handler: oauthprovider2.GetOauthProviderByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/token/create",
					Handler: token2.CreateTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/update",
					Handler: token2.UpdateTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/delete",
					Handler: token2.DeleteTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/list",
					Handler: token2.GetTokenListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token",
					Handler: token2.GetTokenByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/logout",
					Handler: token2.LogoutHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/department/create",
					Handler: department2.CreateDepartmentHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/department/update",
					Handler: department2.UpdateDepartmentHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/department/delete",
					Handler: department2.DeleteDepartmentHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/department/list",
					Handler: department2.GetDepartmentListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/department",
					Handler: department2.GetDepartmentByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/position/create",
					Handler: position2.CreatePositionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/position/update",
					Handler: position2.UpdatePositionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/position/delete",
					Handler: position2.DeletePositionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/position/list",
					Handler: position2.GetPositionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/position",
					Handler: position2.GetPositionByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/dictionary_detail/create",
					Handler: dictionarydetail2.CreateDictionaryDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/dictionary_detail/update",
					Handler: dictionarydetail2.UpdateDictionaryDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/dictionary_detail/delete",
					Handler: dictionarydetail2.DeleteDictionaryDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/dictionary_detail/list",
					Handler: dictionarydetail2.GetDictionaryDetailListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/dictionary_detail",
					Handler: dictionarydetail2.GetDictionaryDetailByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/dict/:name",
					Handler: dictionarydetail2.GetDictionaryDetailByDictionaryNameHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/task/create",
					Handler: task2.CreateTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task/update",
					Handler: task2.UpdateTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task/delete",
					Handler: task2.DeleteTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task/list",
					Handler: task2.GetTaskListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task",
					Handler: task2.GetTaskByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/task_log/create",
					Handler: tasklog2.CreateTaskLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task_log/update",
					Handler: tasklog2.UpdateTaskLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task_log/delete",
					Handler: tasklog2.DeleteTaskLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task_log/list",
					Handler: tasklog2.GetTaskLogListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task_log",
					Handler: tasklog2.GetTaskLogByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/email_log/create",
					Handler: emaillog2.CreateEmailLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email_log/update",
					Handler: emaillog2.UpdateEmailLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email_log/delete",
					Handler: emaillog2.DeleteEmailLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email_log/list",
					Handler: emaillog2.GetEmailLogListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email_log",
					Handler: emaillog2.GetEmailLogByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/sms_log/create",
					Handler: smslog2.CreateSmsLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sms_log/update",
					Handler: smslog2.UpdateSmsLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sms_log/delete",
					Handler: smslog2.DeleteSmsLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sms_log/list",
					Handler: smslog2.GetSmsLogListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sms_log",
					Handler: smslog2.GetSmsLogByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/sms_provider/create",
					Handler: smsprovider2.CreateSmsProviderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sms_provider/update",
					Handler: smsprovider2.UpdateSmsProviderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sms_provider/delete",
					Handler: smsprovider2.DeleteSmsProviderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sms_provider/list",
					Handler: smsprovider2.GetSmsProviderListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sms_provider",
					Handler: smsprovider2.GetSmsProviderByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/email_provider/create",
					Handler: emailprovider2.CreateEmailProviderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email_provider/update",
					Handler: emailprovider2.UpdateEmailProviderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email_provider/delete",
					Handler: emailprovider2.DeleteEmailProviderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email_provider/list",
					Handler: emailprovider2.GetEmailProviderListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email_provider",
					Handler: emailprovider2.GetEmailProviderByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/sms/send",
					Handler: messagesender2.SendSmsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/email/send",
					Handler: messagesender2.SendEmailHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/configuration/create",
					Handler: configuration2.CreateConfigurationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/configuration/update",
					Handler: configuration2.UpdateConfigurationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/configuration/delete",
					Handler: configuration2.DeleteConfigurationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/configuration/list",
					Handler: configuration2.GetConfigurationListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/configuration",
					Handler: configuration2.GetConfigurationByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/configuration/system/list",
				Handler: publicapi.GetPublicSystemConfigurationListHandler(serverCtx),
			},
		},
	)
}
