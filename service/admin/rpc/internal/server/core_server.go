// Code generated by goctl. DO NOT EDIT.
// Source: core.proto

package server

import (
	"context"

	api2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/api"
	authority2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/authority"
	"github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/base"
	configuration2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/configuration"
	department2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/department"
	dictionary2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/dictionary"
	dictionarydetail2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/dictionarydetail"
	menu2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/menu"
	oauthprovider2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/oauthprovider"
	position2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/position"
	role2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/role"
	token2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/token"
	user2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/logic/user"
	"github.com/suyuan32/simple-admin-core/service/admin/rpc/internal/svc"
	core2 "github.com/suyuan32/simple-admin-core/service/admin/rpc/types/core"
)

type CoreServer struct {
	svcCtx *svc.ServiceContext
	core2.UnimplementedCoreServer
}

func NewCoreServer(svcCtx *svc.ServiceContext) *CoreServer {
	return &CoreServer{
		svcCtx: svcCtx,
	}
}

// API management
func (s *CoreServer) CreateApi(ctx context.Context, in *core2.ApiInfo) (*core2.BaseIDResp, error) {
	l := api2.NewCreateApiLogic(ctx, s.svcCtx)
	return l.CreateApi(in)
}

func (s *CoreServer) UpdateApi(ctx context.Context, in *core2.ApiInfo) (*core2.BaseResp, error) {
	l := api2.NewUpdateApiLogic(ctx, s.svcCtx)
	return l.UpdateApi(in)
}

func (s *CoreServer) GetApiList(ctx context.Context, in *core2.ApiListReq) (*core2.ApiListResp, error) {
	l := api2.NewGetApiListLogic(ctx, s.svcCtx)
	return l.GetApiList(in)
}

func (s *CoreServer) GetApiById(ctx context.Context, in *core2.IDReq) (*core2.ApiInfo, error) {
	l := api2.NewGetApiByIdLogic(ctx, s.svcCtx)
	return l.GetApiById(in)
}

func (s *CoreServer) DeleteApi(ctx context.Context, in *core2.IDsReq) (*core2.BaseResp, error) {
	l := api2.NewDeleteApiLogic(ctx, s.svcCtx)
	return l.DeleteApi(in)
}

func (s *CoreServer) GetMenuAuthority(ctx context.Context, in *core2.IDReq) (*core2.RoleMenuAuthorityResp, error) {
	l := authority2.NewGetMenuAuthorityLogic(ctx, s.svcCtx)
	return l.GetMenuAuthority(in)
}

func (s *CoreServer) CreateOrUpdateMenuAuthority(ctx context.Context, in *core2.RoleMenuAuthorityReq) (*core2.BaseResp, error) {
	l := authority2.NewCreateOrUpdateMenuAuthorityLogic(ctx, s.svcCtx)
	return l.CreateOrUpdateMenuAuthority(in)
}

func (s *CoreServer) InitDatabase(ctx context.Context, in *core2.Empty) (*core2.BaseResp, error) {
	l := base.NewInitDatabaseLogic(ctx, s.svcCtx)
	return l.InitDatabase(in)
}

// Configuration management
func (s *CoreServer) CreateConfiguration(ctx context.Context, in *core2.ConfigurationInfo) (*core2.BaseIDResp, error) {
	l := configuration2.NewCreateConfigurationLogic(ctx, s.svcCtx)
	return l.CreateConfiguration(in)
}

func (s *CoreServer) UpdateConfiguration(ctx context.Context, in *core2.ConfigurationInfo) (*core2.BaseResp, error) {
	l := configuration2.NewUpdateConfigurationLogic(ctx, s.svcCtx)
	return l.UpdateConfiguration(in)
}

func (s *CoreServer) GetConfigurationList(ctx context.Context, in *core2.ConfigurationListReq) (*core2.ConfigurationListResp, error) {
	l := configuration2.NewGetConfigurationListLogic(ctx, s.svcCtx)
	return l.GetConfigurationList(in)
}

func (s *CoreServer) GetConfigurationById(ctx context.Context, in *core2.IDReq) (*core2.ConfigurationInfo, error) {
	l := configuration2.NewGetConfigurationByIdLogic(ctx, s.svcCtx)
	return l.GetConfigurationById(in)
}

func (s *CoreServer) DeleteConfiguration(ctx context.Context, in *core2.IDsReq) (*core2.BaseResp, error) {
	l := configuration2.NewDeleteConfigurationLogic(ctx, s.svcCtx)
	return l.DeleteConfiguration(in)
}

// Department management
func (s *CoreServer) CreateDepartment(ctx context.Context, in *core2.DepartmentInfo) (*core2.BaseIDResp, error) {
	l := department2.NewCreateDepartmentLogic(ctx, s.svcCtx)
	return l.CreateDepartment(in)
}

func (s *CoreServer) UpdateDepartment(ctx context.Context, in *core2.DepartmentInfo) (*core2.BaseResp, error) {
	l := department2.NewUpdateDepartmentLogic(ctx, s.svcCtx)
	return l.UpdateDepartment(in)
}

func (s *CoreServer) GetDepartmentList(ctx context.Context, in *core2.DepartmentListReq) (*core2.DepartmentListResp, error) {
	l := department2.NewGetDepartmentListLogic(ctx, s.svcCtx)
	return l.GetDepartmentList(in)
}

func (s *CoreServer) GetDepartmentById(ctx context.Context, in *core2.IDReq) (*core2.DepartmentInfo, error) {
	l := department2.NewGetDepartmentByIdLogic(ctx, s.svcCtx)
	return l.GetDepartmentById(in)
}

func (s *CoreServer) DeleteDepartment(ctx context.Context, in *core2.IDsReq) (*core2.BaseResp, error) {
	l := department2.NewDeleteDepartmentLogic(ctx, s.svcCtx)
	return l.DeleteDepartment(in)
}

// Dictionary management
func (s *CoreServer) CreateDictionary(ctx context.Context, in *core2.DictionaryInfo) (*core2.BaseIDResp, error) {
	l := dictionary2.NewCreateDictionaryLogic(ctx, s.svcCtx)
	return l.CreateDictionary(in)
}

func (s *CoreServer) UpdateDictionary(ctx context.Context, in *core2.DictionaryInfo) (*core2.BaseResp, error) {
	l := dictionary2.NewUpdateDictionaryLogic(ctx, s.svcCtx)
	return l.UpdateDictionary(in)
}

func (s *CoreServer) GetDictionaryList(ctx context.Context, in *core2.DictionaryListReq) (*core2.DictionaryListResp, error) {
	l := dictionary2.NewGetDictionaryListLogic(ctx, s.svcCtx)
	return l.GetDictionaryList(in)
}

func (s *CoreServer) GetDictionaryById(ctx context.Context, in *core2.IDReq) (*core2.DictionaryInfo, error) {
	l := dictionary2.NewGetDictionaryByIdLogic(ctx, s.svcCtx)
	return l.GetDictionaryById(in)
}

func (s *CoreServer) DeleteDictionary(ctx context.Context, in *core2.IDsReq) (*core2.BaseResp, error) {
	l := dictionary2.NewDeleteDictionaryLogic(ctx, s.svcCtx)
	return l.DeleteDictionary(in)
}

// DictionaryDetail management
func (s *CoreServer) CreateDictionaryDetail(ctx context.Context, in *core2.DictionaryDetailInfo) (*core2.BaseIDResp, error) {
	l := dictionarydetail2.NewCreateDictionaryDetailLogic(ctx, s.svcCtx)
	return l.CreateDictionaryDetail(in)
}

func (s *CoreServer) UpdateDictionaryDetail(ctx context.Context, in *core2.DictionaryDetailInfo) (*core2.BaseResp, error) {
	l := dictionarydetail2.NewUpdateDictionaryDetailLogic(ctx, s.svcCtx)
	return l.UpdateDictionaryDetail(in)
}

func (s *CoreServer) GetDictionaryDetailList(ctx context.Context, in *core2.DictionaryDetailListReq) (*core2.DictionaryDetailListResp, error) {
	l := dictionarydetail2.NewGetDictionaryDetailListLogic(ctx, s.svcCtx)
	return l.GetDictionaryDetailList(in)
}

func (s *CoreServer) GetDictionaryDetailById(ctx context.Context, in *core2.IDReq) (*core2.DictionaryDetailInfo, error) {
	l := dictionarydetail2.NewGetDictionaryDetailByIdLogic(ctx, s.svcCtx)
	return l.GetDictionaryDetailById(in)
}

func (s *CoreServer) DeleteDictionaryDetail(ctx context.Context, in *core2.IDsReq) (*core2.BaseResp, error) {
	l := dictionarydetail2.NewDeleteDictionaryDetailLogic(ctx, s.svcCtx)
	return l.DeleteDictionaryDetail(in)
}

func (s *CoreServer) GetDictionaryDetailByDictionaryName(ctx context.Context, in *core2.BaseMsg) (*core2.DictionaryDetailListResp, error) {
	l := dictionarydetail2.NewGetDictionaryDetailByDictionaryNameLogic(ctx, s.svcCtx)
	return l.GetDictionaryDetailByDictionaryName(in)
}

func (s *CoreServer) CreateMenu(ctx context.Context, in *core2.MenuInfo) (*core2.BaseIDResp, error) {
	l := menu2.NewCreateMenuLogic(ctx, s.svcCtx)
	return l.CreateMenu(in)
}

func (s *CoreServer) UpdateMenu(ctx context.Context, in *core2.MenuInfo) (*core2.BaseResp, error) {
	l := menu2.NewUpdateMenuLogic(ctx, s.svcCtx)
	return l.UpdateMenu(in)
}

func (s *CoreServer) DeleteMenu(ctx context.Context, in *core2.IDReq) (*core2.BaseResp, error) {
	l := menu2.NewDeleteMenuLogic(ctx, s.svcCtx)
	return l.DeleteMenu(in)
}

func (s *CoreServer) GetMenuListByRole(ctx context.Context, in *core2.BaseMsg) (*core2.MenuInfoList, error) {
	l := menu2.NewGetMenuListByRoleLogic(ctx, s.svcCtx)
	return l.GetMenuListByRole(in)
}

func (s *CoreServer) GetMenuList(ctx context.Context, in *core2.PageInfoReq) (*core2.MenuInfoList, error) {
	l := menu2.NewGetMenuListLogic(ctx, s.svcCtx)
	return l.GetMenuList(in)
}

// OauthProvider management
func (s *CoreServer) CreateOauthProvider(ctx context.Context, in *core2.OauthProviderInfo) (*core2.BaseIDResp, error) {
	l := oauthprovider2.NewCreateOauthProviderLogic(ctx, s.svcCtx)
	return l.CreateOauthProvider(in)
}

func (s *CoreServer) UpdateOauthProvider(ctx context.Context, in *core2.OauthProviderInfo) (*core2.BaseResp, error) {
	l := oauthprovider2.NewUpdateOauthProviderLogic(ctx, s.svcCtx)
	return l.UpdateOauthProvider(in)
}

func (s *CoreServer) GetOauthProviderList(ctx context.Context, in *core2.OauthProviderListReq) (*core2.OauthProviderListResp, error) {
	l := oauthprovider2.NewGetOauthProviderListLogic(ctx, s.svcCtx)
	return l.GetOauthProviderList(in)
}

func (s *CoreServer) GetOauthProviderById(ctx context.Context, in *core2.IDReq) (*core2.OauthProviderInfo, error) {
	l := oauthprovider2.NewGetOauthProviderByIdLogic(ctx, s.svcCtx)
	return l.GetOauthProviderById(in)
}

func (s *CoreServer) DeleteOauthProvider(ctx context.Context, in *core2.IDsReq) (*core2.BaseResp, error) {
	l := oauthprovider2.NewDeleteOauthProviderLogic(ctx, s.svcCtx)
	return l.DeleteOauthProvider(in)
}

func (s *CoreServer) OauthLogin(ctx context.Context, in *core2.OauthLoginReq) (*core2.OauthRedirectResp, error) {
	l := oauthprovider2.NewOauthLoginLogic(ctx, s.svcCtx)
	return l.OauthLogin(in)
}

func (s *CoreServer) OauthCallback(ctx context.Context, in *core2.CallbackReq) (*core2.UserInfo, error) {
	l := oauthprovider2.NewOauthCallbackLogic(ctx, s.svcCtx)
	return l.OauthCallback(in)
}

// Position management
func (s *CoreServer) CreatePosition(ctx context.Context, in *core2.PositionInfo) (*core2.BaseIDResp, error) {
	l := position2.NewCreatePositionLogic(ctx, s.svcCtx)
	return l.CreatePosition(in)
}

func (s *CoreServer) UpdatePosition(ctx context.Context, in *core2.PositionInfo) (*core2.BaseResp, error) {
	l := position2.NewUpdatePositionLogic(ctx, s.svcCtx)
	return l.UpdatePosition(in)
}

func (s *CoreServer) GetPositionList(ctx context.Context, in *core2.PositionListReq) (*core2.PositionListResp, error) {
	l := position2.NewGetPositionListLogic(ctx, s.svcCtx)
	return l.GetPositionList(in)
}

func (s *CoreServer) GetPositionById(ctx context.Context, in *core2.IDReq) (*core2.PositionInfo, error) {
	l := position2.NewGetPositionByIdLogic(ctx, s.svcCtx)
	return l.GetPositionById(in)
}

func (s *CoreServer) DeletePosition(ctx context.Context, in *core2.IDsReq) (*core2.BaseResp, error) {
	l := position2.NewDeletePositionLogic(ctx, s.svcCtx)
	return l.DeletePosition(in)
}

// Role management
func (s *CoreServer) CreateRole(ctx context.Context, in *core2.RoleInfo) (*core2.BaseIDResp, error) {
	l := role2.NewCreateRoleLogic(ctx, s.svcCtx)
	return l.CreateRole(in)
}

func (s *CoreServer) UpdateRole(ctx context.Context, in *core2.RoleInfo) (*core2.BaseResp, error) {
	l := role2.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

func (s *CoreServer) GetRoleList(ctx context.Context, in *core2.RoleListReq) (*core2.RoleListResp, error) {
	l := role2.NewGetRoleListLogic(ctx, s.svcCtx)
	return l.GetRoleList(in)
}

func (s *CoreServer) GetRoleById(ctx context.Context, in *core2.IDReq) (*core2.RoleInfo, error) {
	l := role2.NewGetRoleByIdLogic(ctx, s.svcCtx)
	return l.GetRoleById(in)
}

func (s *CoreServer) DeleteRole(ctx context.Context, in *core2.IDsReq) (*core2.BaseResp, error) {
	l := role2.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

// Token management
func (s *CoreServer) CreateToken(ctx context.Context, in *core2.TokenInfo) (*core2.BaseUUIDResp, error) {
	l := token2.NewCreateTokenLogic(ctx, s.svcCtx)
	return l.CreateToken(in)
}

func (s *CoreServer) DeleteToken(ctx context.Context, in *core2.UUIDsReq) (*core2.BaseResp, error) {
	l := token2.NewDeleteTokenLogic(ctx, s.svcCtx)
	return l.DeleteToken(in)
}

func (s *CoreServer) GetTokenList(ctx context.Context, in *core2.TokenListReq) (*core2.TokenListResp, error) {
	l := token2.NewGetTokenListLogic(ctx, s.svcCtx)
	return l.GetTokenList(in)
}

func (s *CoreServer) GetTokenById(ctx context.Context, in *core2.UUIDReq) (*core2.TokenInfo, error) {
	l := token2.NewGetTokenByIdLogic(ctx, s.svcCtx)
	return l.GetTokenById(in)
}

func (s *CoreServer) BlockUserAllToken(ctx context.Context, in *core2.UUIDReq) (*core2.BaseResp, error) {
	l := token2.NewBlockUserAllTokenLogic(ctx, s.svcCtx)
	return l.BlockUserAllToken(in)
}

func (s *CoreServer) UpdateToken(ctx context.Context, in *core2.TokenInfo) (*core2.BaseResp, error) {
	l := token2.NewUpdateTokenLogic(ctx, s.svcCtx)
	return l.UpdateToken(in)
}

// User management
func (s *CoreServer) CreateUser(ctx context.Context, in *core2.UserInfo) (*core2.BaseUUIDResp, error) {
	l := user2.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *CoreServer) UpdateUser(ctx context.Context, in *core2.UserInfo) (*core2.BaseResp, error) {
	l := user2.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *CoreServer) GetUserList(ctx context.Context, in *core2.UserListReq) (*core2.UserListResp, error) {
	l := user2.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

func (s *CoreServer) GetUserById(ctx context.Context, in *core2.UUIDReq) (*core2.UserInfo, error) {
	l := user2.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *CoreServer) GetUserByUsername(ctx context.Context, in *core2.UsernameReq) (*core2.UserInfo, error) {
	l := user2.NewGetUserByUsernameLogic(ctx, s.svcCtx)
	return l.GetUserByUsername(in)
}

func (s *CoreServer) DeleteUser(ctx context.Context, in *core2.UUIDsReq) (*core2.BaseResp, error) {
	l := user2.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}
